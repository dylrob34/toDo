{"version":3,"sources":["component/pages/LoginForm.js","component/Landing.js","component/pages/SignIn.js","App.js","reportWebVitals.js","index.js"],"names":["mymargin","marginRight","LoginForm","userLogin","error","useState","email","password","details","setDetails","onSubmit","e","preventDefault","className","htmlFor","type","name","id","onChange","target","value","style","to","Landing","user","setUser","setError","onClick","console","log","domain","fetch","method","headers","Accept","body","JSON","stringify","pass","then","res","json","resJson","login","SignIn","setEmail","setPassword","placeholder","App","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5b43cad8.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\nimport { BrowserRouter as Link } from 'react-router-dom';\r\n\r\nconst mymargin = {\r\n    marginRight: \"5px\",\r\n}\r\n\r\nconst LoginForm = ({ userLogin, error }) => {\r\n        \r\n    // Set Details:\r\n        const [details, setDetails] = useState({email:'', password:''});\r\n        // Function to handle on submit of the login button:\r\n        const submitHandler = e => {\r\n            e.preventDefault();\r\n            // This calls the function defined in App.js and passes in details to it so that App.js can use it.\r\n            userLogin(details);\r\n        }\r\n\r\n    return (\r\n        <form onSubmit={submitHandler}>\r\n            <div className=\"form-inner\">\r\n            <h2>Login</h2>\r\n                {(error !==\"\") ? ((<div className='error'>{error}</div>)) : \"\"}\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"email\">Email: </label>\r\n                    <input type=\"email\" name=\"email\" id=\"email\"\r\n                    // On change for event e, call setDetails pulling in what details already is + the value of the event (keystroke)\r\n                    // then set the value of the state email in details to ...details + the new keystroke.\r\n                    onChange={e => setDetails({...details, email: e.target.value})} value={details.email}/>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"password\">Password: </label>\r\n                    <input type=\"password\" name=\"password\" id='password' \r\n                    onChange={e => setDetails({...details, password: e.target.value})} value={details.password}/>\r\n                </div>\r\n            <input type=\"submit\" value=\"LOGIN\" style={mymargin}/>\r\n            <Link to=\"/signin\">Create Account</Link>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default LoginForm\r\n\r\n \r\n\r\n\r\n/* Vanilla HTML from the fisrt time I created a login page:\r\n    <div>\r\n        <h1>Anchor Weekly</h1>\r\n        <div class=\"login-container\">\r\n            <h2 class=\"login-header\">Log in:</h2>\r\n                <input type=\"text\" class=\"username\">\r\n                    <label class='username-label'>Username / Email</label>\r\n                </input>\r\n                <input type=\"text\" class=\"password\">\r\n                    <label class='password-label'>Password</label>\r\n                </input>\r\n            <div class=\"submit\">\r\n                <button type=\"submit\" class=\"login-btn\">Login</button>\r\n            </div>\r\n            <div><Link href=\"#\">Forgot Login</Link></div>\r\n            <div class=\"join\">\r\n                <small>Don't have an account?</small>\r\n                <button class=\"sign-up\">Join the club</button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n*/","import React, {useState} from 'react';\r\nimport LoginForm from './pages/LoginForm';\r\nimport { domain } from '../App.js';\r\n\r\nconst Landing = () => {\r\n  // Variable sets until they are moved to Login state:\r\n  const [user, setUser] = useState({name:'', email:''});\r\n  const [error, setError] = useState(\"\");\r\n\r\n  // Method creation until they are moved to a Login state:\r\n  const userLogin = details => {\r\n    console.log(details);\r\n    console.log(\"fetching from: \" + \"http://\" + domain + \"/api/auth/login\");\r\n\r\n    //Added by Dylan to authenticate from backend\r\n    fetch(\"http://\" + domain + \"/api/auth/login\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify({\r\n        user: details.email,\r\n        pass: details.password\r\n      })\r\n    })\r\n    .then((res) => res.json())\r\n    .then((resJson) => {\r\n      if (resJson.error === true) {\r\n        console.log(\"The login information didn't match...\");\r\n        setError(\"The login information didn't match...\");\r\n      } else if (resJson.login === true) {\r\n        setUser({\r\n          name: resJson.name,\r\n          email: details.email\r\n        });\r\n      }\r\n    })\r\n  }\r\n  const userLogout = () => {\r\n    console.log(\"Logged Out.\")\r\n    setUser({\r\n      name:'',\r\n      email:''\r\n    })\r\n  }\r\n\r\n\r\n    return (\r\n        <div className=\"landing\">\r\n            {(user.email !=='') ? (\r\n                <div className=\"welcome\">\r\n                <h2>Welcome, <span>{user.name}</span></h2>\r\n                <button onClick={userLogout}>Logout</button>\r\n                </div>\r\n            ) : (\r\n                <LoginForm userLogin={userLogin} error={error} />\r\n            )\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Landing\r\n\r\n","import React, {useState} from 'react'\r\n\r\nconst SignIn = () => {\r\n\r\n    const [email, setEmail] = useState('')\r\n    const [password, setPassword] = useState('')\r\n\r\n    const handleEmailChange = e => {\r\n        setEmail(e.target.value)\r\n    }\r\n    const handlePasswordChange = e => {\r\n        setPassword(e.target.value)\r\n    }\r\n\r\n    return (\r\n        <form>\r\n            <h1>Create Your Account</h1>\r\n            <div>\r\n                <label htmlFor=\"email\">Email: </label>\r\n                <input type='text' name='email' id='email' placeholder='Your Email...' value={email}\r\n                onChange={ handleEmailChange }\r\n                ></input>\r\n            </div>\r\n            <div>\r\n                <label htmlFor=\"password\">Create Password: </label>\r\n                <input type='text' name='password' id='password' placeholder='Create Password...' value={password}\r\n                onChange={ handlePasswordChange }\r\n                ></input>\r\n            </div>\r\n            <input type=\"submit\" />\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default SignIn\r\n\r\n/*\r\n1. Need to create a way to store users name DONE\r\n2. Need to create a way to store users email DONE\r\n3. Need to create a way to store users password DONE\r\n4. Need to create a way to store users security question\r\n5. Add error handling\r\n6. Add a functon for handling submitting the form.\r\n*/","import { BrowserRouter as Router, Switch, Route, } from 'react-router-dom';\r\n\r\nimport './App.css';\r\nimport Landing from './component/Landing';\r\nimport SignIn from './component/pages/SignIn';\r\n\r\nconst domain = \"localhost\"\r\n\r\nfunction App() {\r\n  \r\n \r\n  return (\r\n    <Router>\r\n      <div className=\"App\">\r\n        <Switch>\r\n          <Route exact path='/' component={ Landing }></Route>\r\n          <Route exact path='/signin' component={ SignIn }></Route>\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n\r\n  );\r\n\r\n}\r\n\r\nexport default App;\r\nexport { domain, };\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}